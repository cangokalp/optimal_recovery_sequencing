#include "bush.h"
#include <pthread.h> /*used in other parts of the assignment */
#define NUM_THREADS 1

//Struct for thread arguments
struct thread_args {
    int id;
    int start;
    int num_points;
    bushes_type *bushes;
    network_type *network;
    algorithmBParameters_type *parameters;
};

void updateBushes(void* pVoid) {
    auto args = (thread_args *) pVoid;
    int start = args->start;
    int num = args->num_points;
    bushes_type *bushes = args->bushes;
    network_type *network = args->network;
    algorithmBParameters_type *parameters = args->parameters;
    for (; start < start + num && start < network->numZones; start++) {
        updateBushB(start, network, bushes, parameters);
        updateFlowsB(origin, network, bushes, parameters);
    }
}

void AlgorithmB(network_type *network, algorithmBParameters_type *parameters) {

	/* Strong connectivity check */
	makeStronglyConnectedNetwork(network);

   /* Allocate memory for bushes */
	int origin, i, iteration = 0;
   bushes_type *bushes = createBushes(network);

	double elapsedTime = 0, gap = INFINITY;

   /* Initialize */
	clock_t stopTime = clock(); /* used for timing */
	initializeBushesB(network, bushes, parameters);

   /* Iterate */
	do {
	   iteration++;

        pthread_t handles[NUM_THREADS];
        thread_args args[NUM_THREADS];
        int pointsPerThread = network->numZones/NUM_THREADS;

        for (int j = 0; j < NUM_THREADS; ++j) {
            args[j].id = j;
            args[j].start = pointsPerThread * j * step;
            args[j].num =  pointsPerThread;
            args[j].network = network;
            args[j].parameters = parameters;
            args[j].bushes = bushes;
        }

        for (int j = 0; j < NUM_THREADS; ++j) {
            pthread_create(&handles[j], NULL, (void* (*)(void*)) updateBushes, &args[j]);
        }

        for(int i = 0; i < NUM_THREADS; i++) {
            pthread_join(handles[i], NULL);
        }

      /* Update bushes */ //Parallelize by doing all updates and then all flows
//		for (origin = 0; origin < network->numZones; origin++) {
//			updateBushB(origin, network, bushes, parameters);
//   		updateFlowsB(origin, network, bushes, parameters);
//		}

      /* Shift flows */ //Parallelize
		for (i = 0; i < parameters->innerIterations; i++) {
			for (origin = 0; origin < network->numZones; origin++) {
				updateFlowsB(origin, network, bushes, parameters);
			}
		}

      /* Check gap and report progress */
		elapsedTime += ((double)(clock() - stopTime)) / CLOCKS_PER_SEC; /* Exclude gap calculations from run time */
		gap = calculateGap(network, parameters->gapFunction);
		displayMessage(LOW_NOTIFICATIONS, "Iteration %ld: gap %.15f, Beckmann %.13g, time %.3f s.\n", iteration, gap, BeckmannFunction(network), elapsedTime);
		stopTime = clock();
	} while (elapsedTime < parameters->maxTime && iteration < parameters->maxIterations && gap > parameters->convergenceGap);

   /* Clean up */
	deleteBushes(network, bushes);

}

algorithmBParameters_type initializeAlgorithmBParameters() {
   algorithmBParameters_type parameters;

   parameters.gapFunction = RELATIVE_GAP_1;
   parameters.convergenceGap = 0;
   parameters.maxTime = INFINITY;
   parameters.maxIterations = LONG_MAX;

   parameters.innerIterations = 4;
   parameters.shiftReps = 5;
   parameters.rescanAfterShift = FALSE;

   parameters.thresholdGap = 0;
   parameters.minCostDifference = 0;
   parameters.minLinkFlowShift = 0;

   parameters.minLinkFlow = 1e-14;
   parameters.minDerivative = 1e-6;
   parameters.newtonStep = 1;
   parameters.numNewtonShifts = 1;

   parameters.SPQueueDiscipline = DEQUE;

   parameters.createInitialBush = &initialBushShortestPath;
   parameters.topologicalOrder = &genericTopologicalOrder;
   parameters.linkShiftB = &exactCostUpdate;

   return parameters;
}

void initialBushShortestPath(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   /* Find shortest path and set bush preds */
	arcIndexBellmanFord(origin, bushes->SPcost, bushes->pred[origin], network, parameters->SPQueueDiscipline);

	/* Set bush topological order */
	bushes->numMerges[origin] = 0;
	bushes->merges[origin] = newVector(0, merge_type *);
	parameters->topologicalOrder(origin, network, bushes, parameters);
}

void initialBushBFS(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   fatalError("initialBushBFS is not yet implemented, call a different function instead.");
   /* Suppress warnings */
   displayMessage(FULL_DEBUG, "%d %p %p %p", origin, network, bushes, parameters);
}

void genericTopologicalOrder(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   arcListElt *curArc;
	int i, j, m,  next, highestMerge = 0;
	
	declareVector(int, indegree, network->numNodes);
	for (i = 0; i < network->numNodes; i++) {
	   indegree[i] = 1; /* By default non-origin nodes are assumed to have 1 incoming link; merges and origin handled below */
	   bushes->bushOrder[i] = NO_PATH_EXISTS;
	}
	for (i = 0; i < network->numNodes; i++) {
	   if (isMergeNode(origin, i, bushes) == TRUE) {
	      m = pred2merge(bushes->pred[origin][i]);
	      indegree[i] = bushes->merges[origin][m]->numApproaches;
	   }
	}
	indegree[origin] = 0;

	queue_type LIST = createQueue(network->numNodes, network->numNodes);
	next = 0;
	for (i = 0; i < network->numNodes; i++) if (indegree[i] == 0) enQueue(&LIST, i);
	while (LIST.curelts > 0) {
		i = deQueue(&LIST);
		bushes->bushOrder[next] = i;
		if (isMergeNode(origin, i, bushes) == TRUE) highestMerge = next;
		next++;
      for (curArc = network->nodes[i].forwardStar.head; curArc != NULL; curArc = curArc->next) {
         if (isInBush(origin, ptr2arc(network, curArc->arc), network, bushes) == TRUE) {
            j = curArc->arc->head;
            indegree[j]--;
            if (indegree[j] == 0) enQueue(&LIST, j);
         }
		}
	}
	if (next < network->numNodes) fatalError("Graph given to bushTopologicalOrder contains a cycle.");
	bushes->lastMerge[origin] = highestMerge;

	deleteQueue(&LIST);
	deleteVector(indegree);
	
	/* Suppress warnings */
   if (0) displayMessage(FULL_DEBUG, "%p", parameters);
}

void mergeFirstTopologicalOrder(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   fatalError("mergeFirstTopologicalOrder is not yet implemented, call a different function instead.");
   /* Suppress warnings */
   displayMessage(FULL_DEBUG, "%d %p %p %p", origin, network, bushes, parameters);
}

bool isMergeNode(int origin, int i, bushes_type *bushes) {
   return (bushes->pred[origin][i] < 0 && i != origin) ? TRUE : FALSE;
}


/* Merges 0, 1, 2, ... are indexed by -1, -2, -3 as predecessors.  (otherwise zero is ambiguous).  These functions convert back and forth */
int pred2merge(int ij) {
   return -(ij + 1);
}

int merge2pred(int m) {
   return -(m + 1);
}

bool isInBush(int origin, int ij, network_type *network, bushes_type *bushes) {
   int backarc, j = network->arcs[ij].head, m;
   merge_type *merge;
   if (isMergeNode(origin, j, bushes) == FALSE) {
      return (bushes->pred[origin][j] == ij) ? TRUE : FALSE;
   } else {
      m = pred2merge(bushes->pred[origin][j]);
      merge = bushes->merges[origin][m];
      for (backarc = 0; backarc < merge->numApproaches; backarc ++) {
         if (merge->approach[backarc] == ij) return TRUE;
      }
   }
   return FALSE;
}


bushes_type *createBushes(network_type *network) {
   declareScalar(bushes_type, bushes);
   int i;

   bushes->LPcost = newVector(network->numNodes, double);
   bushes->SPcost = newVector(network->numNodes, double);
   bushes->flow = newVector(network->numArcs, double);
   bushes->nodeFlow = newVector(network->numNodes, double);
   bushes->pred = newMatrix(network->numZones, network->numNodes, int);
   bushes->bushOrder = newVector(network->numNodes, int);
   bushes->lastMerge = newVector(network->numZones, int);
   bushes->numMerges = newVector(network->numZones, int);
   bushes->merges = newVector(network->numZones, merge_type**);

   for (i = 0; i < network->numZones; i++) {
      bushes->numMerges[i] = 0;
   }

   return bushes;
}

void deleteBushes(network_type *network, bushes_type *bushes) {
   int i, m;

   deleteVector(bushes->LPcost);
   deleteVector(bushes->SPcost);
   deleteVector(bushes->flow);
   deleteVector(bushes->nodeFlow);
   deleteMatrix(bushes->pred, network->numZones);
   deleteVector(bushes->bushOrder);
   deleteVector(bushes->lastMerge);
   for (i = 0; i < network->numZones; i++) {
      for (m = 0; m < bushes->numMerges[i]; m++) {
         deleteMerge(bushes->merges[i][m]);
      }
      deleteVector(bushes->merges[i]);
   }
   deleteVector(bushes->numMerges);
   deleteVector(bushes->merges);
   
   deleteScalar(bushes);
}


/*
Initialize bushes:
1. Zero out flow on all links, set travel times to free-flow
2. Cycle through bushes, call getInitialBush --> first thing is free-flow but this can be changed.  Make this a function pointer in the parameters
3. Calculate link flows with a downward pass
4. Increase link flows based on da bush
5. DEPENDING ON OPTIONS, recalculate travel times
6. At end, update ders too.  And other data structures...
*/
void initializeBushesB(network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   int i, ij;

   for (ij = 0; ij < network->numArcs; ij++) {
      network->arcs[ij].flow = 0;
      network->arcs[ij].cost = network->arcs[ij].freeFlowTime;
   }

   for (i = 0; i < network->numZones; i++) {
      parameters->createInitialBush(i, network, bushes, parameters); /* Sets preds, bushOrder */
      calculateBushFlows(i, network, bushes);
      for (ij = 0; ij < network->numArcs; ij++) {
         network->arcs[ij].flow += bushes->flow[ij];
         network->arcs[ij].cost = network->arcs[ij].calculateCost(&network->arcs[ij]);
      }
   }

   for (ij = 0; ij < network->numArcs; ij++) {
      network->arcs[ij].der = network->arcs[ij].calculateDer(&network->arcs[ij]);
   }
}

/*
Find shortest and longest used paths simultaneously (need this for flow shifting AND bush updates; longestUsed = TRUE means restrict LP search for contributing links.
*/
void scanBushes(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters, bool longestUsed) {
	int h, i, hi, m, curnode, curarc;
	double tempcost;
	merge_type *merge;

	for (i = 0; i < network->numNodes; i++) {
		bushes->LPcost[i] = -INFINITY;
		bushes->SPcost[i] = INFINITY;
	}
	
	/* Ensure costs are up to date */
	if (parameters->linkShiftB != &exactCostUpdate) updateAllCosts(network);

   bushes->SPcost[origin] = 0;
	bushes->LPcost[origin] = 0;
	for (curnode = 1; curnode < network->numNodes; curnode++) {
		i = bushes->bushOrder[curnode];
		if (isMergeNode(origin, i, bushes) == TRUE) { /* Iterative over incoming links */
         m = pred2merge(bushes->pred[origin][i]);
		   merge = bushes->merges[origin][m];
		   for (curarc = 0; curarc < merge->numApproaches; curarc++) {
		      hi = merge->approach[curarc];
		      h = network->arcs[hi].tail;
		      tempcost = bushes->SPcost[h] + network->arcs[hi].cost;
		      if (tempcost < bushes->SPcost[i]) {
		         bushes->SPcost[i] = tempcost;
		         merge->SPlink = curarc;
		      }
		      tempcost = bushes->LPcost[h] + network->arcs[hi].cost;		      
		      if (tempcost > bushes->LPcost[i]
		         && (longestUsed == FALSE || merge->approachFlow[curarc] > parameters->minLinkFlow)) {
		         bushes->LPcost[i] = tempcost;
		         merge->LPlink = curarc;
		      }
		   }
		} else { /* Only one incoming bush link, not much to do */
   		hi = bushes->pred[origin][i];
   		h = network->arcs[hi].tail;
		   bushes->LPcost[i] = bushes->LPcost[h] + network->arcs[hi].cost;
		   bushes->SPcost[i] = bushes->SPcost[h] + network->arcs[hi].cost;
		}
   }

}

void updateBushB(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   int ij, i, j, newArcs = 0;
   
   /* First update labels... ignoring longest unused paths since those will be removed in the next step. */
	parameters->topologicalOrder(origin, network, bushes, parameters);   
   scanBushes(origin, network, bushes, parameters, TRUE);
   calculateBushFlows(origin, network, bushes);
   
   /* Make a first pass... */
   for (ij = 0; ij < network->numArcs; ij++) {
      /* Mark links with near-zero contribution for removal by setting to exactly zero */
      if (bushes->flow[ij] < parameters->minLinkFlow) bushes->flow[ij] = 0;
      if (bushes->flow[ij] > 0) continue; /* Link is already in the bush, no need to add it again */
      /* See if the link provides a shortcut using the strict criterion */
      i = network->arcs[ij].tail;
      j = network->arcs[ij].head;
      if (bushes->LPcost[i] == -INFINITY && bushes->LPcost[j] > -INFINITY) continue; /* No path to extend */
      if (bushes->SPcost[i] + network->arcs[ij].cost < bushes->SPcost[j]
          && bushes->LPcost[i] < bushes->LPcost[j]
          && (network->arcs[ij].tail == origin || network->arcs[ij].tail >= network->firstThroughNode)) 
      {
         bushes->flow[ij] = NEW_LINK;
         newArcs++;
      } else if (bushes->SPcost[i] + network->arcs[ij].cost == bushes->SPcost[j] 
                 && bushes->flow[ij] == 0) { /* Never delete shortest path tree... should be OK with floating point comparison since this is how SPcost is calculated */
         bushes->flow[ij] = NEW_LINK;
      }
   }
   
   /* If strict criterion fails, try a looser one */
   if (newArcs == 0) {
      for (ij = 0; ij < network->numArcs; ij++) {
         i = network->arcs[ij].tail;
         j = network->arcs[ij].head;
         if (bushes->LPcost[i] == -INFINITY && bushes->LPcost[j] > -INFINITY) continue; /* No path to extend */
         if (bushes->flow[ij] == 0 && bushes->LPcost[i] < bushes->LPcost[j]
             && (network->arcs[ij].tail == origin || network->arcs[ij].tail >= network->firstThroughNode))          
         {
            bushes->flow[ij] = NEW_LINK;
         }
      }
   }      

   /* Finally update bush data structures: delete/add merges, find a new topological order, rectify approach proportions */
   reconstructMerges(origin, network, bushes);
}

/*
For each node do the following...
1. Normalize the approach proportions for incoming links -- if there are zero for a non-origin, throw a flag.
2. Go through each node, set pred if there is just one incoming link, otherwise create a merge
Stores merges in a linked list at first, then transfer into an array for indexing purposes.
*/
void reconstructMerges(int origin, network_type *network, bushes_type *bushes) {
   int i, hi, lastApproach, m, arc, numApproaches;
   arcListElt *curArc;
   merge_type *merge;
   mergeDLL *mergeList = createMergeDLL();
   mergeDLLelt *curMerge;

   
   /* Create necessary merges */
   for (i = 0; i < network->numNodes; i++) {
      if (i == origin) continue;
      numApproaches = 0;
      for (curArc = network->nodes[i].reverseStar.head; curArc != NULL; curArc = curArc->next) {
         hi = ptr2arc(network, curArc->arc);
         if (bushes->flow[hi] > 0 || bushes->flow[hi] == NEW_LINK) {
            numApproaches++;
            lastApproach = hi;
         }
      }
      
      if (numApproaches == 0) fatalError("Cannot have non-origin node %d in bush %d without incoming contributing links", i, origin);
      if (numApproaches == 1) { /* No merge */
         bushes->pred[origin][i] = lastApproach;
      } else { /* Must create a merge */
         merge = createMerge(numApproaches);
         arc = 0;
         for (curArc = network->nodes[i].reverseStar.head; curArc != NULL; curArc = curArc->next) {
            hi = ptr2arc(network, curArc->arc);
            if (bushes->flow[hi] > 0 || bushes->flow[hi] == NEW_LINK) {
               if (bushes->flow[hi] == NEW_LINK) bushes->flow[hi] = 0;
               merge->approach[arc] = hi;
               merge->approachFlow[arc] = bushes->flow[hi];
               arc++;               
            }
         }
         insertMergeDLL(mergeList, merge, i, mergeList->tail);
      }
   }

   /* Now transfer to array, deleting old merges and replacing with new ones */
   for (m = 0; m < bushes->numMerges[origin]; m++) {
      deleteMerge(bushes->merges[origin][m]);
   }
   deleteVector(bushes->merges[origin]);
   bushes->numMerges[origin] = mergeList->size;
   bushes->merges[origin] = newVector(mergeList->size, merge_type *);
   m = 0;
   for (curMerge = mergeList->head; curMerge != NULL; curMerge = curMerge->next) {
      bushes->merges[origin][m] = curMerge->merge;
      bushes->pred[origin][curMerge->node] = merge2pred(m);
      m++;
   }

   deleteMergeDLL(mergeList);
}

void findDivergenceNodes(int origin, network_type *network, bushes_type *bushes) {
   int i, m, n, SPnode, LPnode, diverge;
   bool found_diverge;
   merge_type *merge;
   declareVector(int, mark, network->numNodes);

   for (i = 0; i < network->numNodes; i++) mark[i] = NO_PATH_EXISTS;

   for (m = 0; m < bushes->numMerges[origin]; m++) {
      i = network->arcs[bushes->merges[origin][m]->approach[0]].head;
      found_diverge = FALSE;
      SPnode = i;
      LPnode = i;
      if (bushes->merges[origin][m]->LPlink == NO_PATH_EXISTS) { /* Sometimes there is no longest used path to a node (zero demand), nothing to do. */
         bushes->merges[origin][m]->divergenceNode = NO_PATH_EXISTS;
         continue;
      }
      while (found_diverge == FALSE) {
         if (SPnode != origin) {
            if (isMergeNode(origin, SPnode, bushes) == FALSE) {
               SPnode = network->arcs[bushes->pred[origin][SPnode]].tail;
            } else {
               n = pred2merge(bushes->pred[origin][SPnode]);
               merge = bushes->merges[origin][n];
               SPnode = network->arcs[merge->approach[merge->SPlink]].tail;
            }
            if (mark[SPnode] == i) {
               diverge = SPnode;
               found_diverge = TRUE;
            }
            mark[SPnode] = i;
         }
         if (LPnode != origin) {
            if (isMergeNode(origin, LPnode, bushes) == FALSE) {
               LPnode = network->arcs[bushes->pred[origin][LPnode]].tail;
            } else {
               n = pred2merge(bushes->pred[origin][LPnode]);
               merge = bushes->merges[origin][n];               
               LPnode = network->arcs[merge->approach[merge->LPlink]].tail;
            }
            if (mark[LPnode] == i) {
               diverge = LPnode;
               found_diverge = TRUE;
            }
            mark[LPnode] = i;
         }
      }
      bushes->merges[origin][m]->divergenceNode = diverge;
   }

   deleteVector(mark);
}


/*
Do a descending pass in reverse topological order... accumulate flows as we go.
Nothing to do unless we are at a merge where LPLink and SPlink differ (and LPcost/SPcost are large enough)
At these points, trace back LPsegment and SPsegment until reaching the divergence node; accumulate costs/ders, identify segment flows
Identify the newton shift
Trace back a second time applying the shift (updating link flows for real; either updating cost for real or with an estimate)
*/
void updateFlowsB(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   int i;
 
   /* Restore topological order and bush flows for this origin */
	parameters->topologicalOrder(origin, network, bushes, parameters);
   calculateBushFlows(origin, network, bushes);

   /* Update longest/shortest paths, check whether there is work to do */
   if (rescanAndCheck(origin, network, bushes, parameters) == FALSE) return;

   /* Now do (possibly multiple) shifts per origin */
   for (i = 0; i < parameters->shiftReps; i++) {
      updateFlowPass(origin, network, bushes, parameters);
      /* Uncomment next line for extra validation checking */
      /* checkFlows(network, bushes); */
      if (parameters->rescanAfterShift == TRUE && i + 1 < parameters->shiftReps) {
         if (rescanAndCheck(origin, network, bushes, parameters) == FALSE) return;
      }
   }

}

bool rescanAndCheck(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   int i;
   double maxgap = 0;

   scanBushes(origin, network, bushes, parameters, TRUE);
   findDivergenceNodes(origin, network, bushes);
   for (i = 0; i < network->numNodes; i++) {
      maxgap = max(maxgap, fabs(bushes->LPcost[i] -bushes->SPcost[i]));
   }
   if (maxgap < parameters->thresholdGap) return FALSE;

   return TRUE;
}


void updateFlowPass(int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   int i, j, k, m, node;
   merge_type *merge;

   /* Initialize node flows with OD matrix */
   for (i = 0; i < network->numZones; i++) bushes->nodeFlow[i] = network->OD[origin][i].demand;
   for (; i < network->numNodes; i++) bushes->nodeFlow[i] = 0;

   /* Descending pass for flow shifts */
   for (node = network->numNodes - 1; node > 0; node--) {
      j = bushes->bushOrder[node];
      if (isMergeNode(origin, j, bushes) == FALSE) { /* Nothing to do */
         pushBackFlowSimple(j, origin, network, bushes);
      } else {
         m = pred2merge(bushes->pred[origin][j]);
         merge = bushes->merges[origin][m];
         if (merge->LPlink == merge->SPlink
             || fabs(bushes->LPcost[j] - bushes->SPcost[j] < parameters->minCostDifference)
             || bushes->nodeFlow[j] < parameters->minLinkFlowShift
             || merge->LPlink == NO_PATH_EXISTS)
         { /* Also nothing to do */
            pushBackFlowMerge(merge, network, bushes);
         } else {
            for (k = 0; k < parameters->numNewtonShifts; k++) {
               newtonFlowShift(j, merge, origin, network, bushes, parameters);
            }
         }
      }
   }
}

void calculateBushFlows(int origin, network_type *network, bushes_type *bushes) {
   int i, j, ij, m, node;
   merge_type *merge;

   /* Initialize node flows with OD matrix */
   for (i = 0; i < network->numZones; i++) bushes->nodeFlow[i] = network->OD[origin][i].demand;
   for (; i < network->numNodes; i++) bushes->nodeFlow[i] = 0;
   for (ij = 0; ij < network->numArcs; ij++) bushes->flow[ij] = 0;

   /* Descending pass for flow calculations  */
   for (node = network->numNodes - 1; node > 0; node--) {
      j = bushes->bushOrder[node];
      if (isMergeNode(origin, j, bushes) == FALSE) { /* Nothing to do */
         pushBackFlowSimple(j, origin, network, bushes);
      } else {
         m = pred2merge(bushes->pred[origin][j]);
         merge = bushes->merges[origin][m];
         pushBackFlowMerge(merge, network, bushes);
      }
   }

}

void pushBackFlowSimple(int j, int origin, network_type *network, bushes_type *bushes) {
   int i, ij;

   ij = bushes->pred[origin][j];
   i = network->arcs[ij].tail;
   bushes->flow[ij] = bushes->nodeFlow[j];
   bushes->nodeFlow[i] += bushes->nodeFlow[j];
}

void rectifyMerge(int j, merge_type *merge, bushes_type *bushes) {
   int arc;
   double totalFlow = 0;

   for (arc = 0; arc < merge->numApproaches; arc++) {
      totalFlow += merge->approachFlow[arc];
   }

   if (totalFlow > 0) {
      for (arc = 0; arc < merge->numApproaches; arc++) {
         merge->approachFlow[arc] *= bushes->nodeFlow[j] / totalFlow;
      }
   } else {
      for (arc = 0; arc < merge->numApproaches; arc++) {
         merge->approachFlow[arc] = 0;
      }
      merge->approachFlow[merge->SPlink] = bushes->nodeFlow[j];
   }

}

void pushBackFlowMerge(merge_type *merge, network_type *network, bushes_type *bushes) {
   int i, ij, arc;
   double flow;

   for (arc = 0; arc < merge->numApproaches; arc++) {
      ij = merge->approach[arc];
      i = network->arcs[ij].tail;
      flow = merge->approachFlow[arc];
      bushes->flow[ij] = flow;
      bushes->nodeFlow[i] += flow;
   }
}

void newtonFlowShift(int j, merge_type *merge, int origin, network_type *network, bushes_type *bushes, algorithmBParameters_type *parameters) {
   double flow1, flow2, cost1, cost2, der1, der2, shift;
   int i, hi, m;
   merge_type *segmentMerge;

   /* Calculate information for longest path segment */
   i = j;
   cost1 = 0;
   der1 = 0;
   flow1 = merge->approachFlow[merge->LPlink];
   while (i != merge->divergenceNode) {
      if (isMergeNode(origin, i, bushes) == FALSE) {
         hi = bushes->pred[origin][i];
      } else {
         m = pred2merge(bushes->pred[origin][i]);
         segmentMerge = bushes->merges[origin][m];
         hi = segmentMerge->approach[segmentMerge->LPlink];
         flow1 = min(flow1, segmentMerge->approachFlow[segmentMerge->LPlink]);
      }
      cost1 += network->arcs[hi].cost;
      der1 += network->arcs[hi].der;
      i = network->arcs[hi].tail;
   }

   /* Do same for shortest path segment */
   i = j;
   cost2 = 0;
   der2 = 0;
   flow2 = merge->approachFlow[merge->SPlink];
   while (i != merge->divergenceNode) {
      if (isMergeNode(origin, i, bushes) == FALSE) {
         hi = bushes->pred[origin][i];
      } else {
         m = pred2merge(bushes->pred[origin][i]);
         segmentMerge = bushes->merges[origin][m];
         hi = segmentMerge->approach[segmentMerge->SPlink];
         flow2 = min(flow2, segmentMerge->approachFlow[segmentMerge->SPlink]);
      }
      cost2 += network->arcs[hi].cost;
      der2 += network->arcs[hi].der;
      i = network->arcs[hi].tail;      
   }

   /* Determine Newton shift, truncating if need be to ensure feasibility */
   if (der1 + der2 == 0) der1 = parameters->minDerivative;
   shift = parameters->newtonStep * (cost1 - cost2) / (der1 + der2);
   shift = min(shift, flow1);
   shift = max(shift, -flow2);

   /* Now apply shift */
   i = j;
   while (i != merge->divergenceNode) {
      if (isMergeNode(origin, i, bushes) == FALSE) {
         hi = bushes->pred[origin][i];
      } else {
         m = pred2merge(bushes->pred[origin][i]);
         segmentMerge = bushes->merges[origin][m];
         hi = segmentMerge->approach[segmentMerge->LPlink];
         segmentMerge->approachFlow[segmentMerge->LPlink] -= shift;
      }
      bushes->flow[hi] -= shift;
      parameters->linkShiftB(hi, -shift, network);
      i = network->arcs[hi].tail;      
   }
   i = j;
   while (i != merge->divergenceNode) {
      if (isMergeNode(origin, i, bushes) == FALSE) {
         hi = bushes->pred[origin][i];
      } else {
         m = pred2merge(bushes->pred[origin][i]);
         segmentMerge = bushes->merges[origin][m];
         hi = segmentMerge->approach[segmentMerge->SPlink];
         segmentMerge->approachFlow[segmentMerge->SPlink] += shift;         
      }
      bushes->flow[hi] += shift;
      parameters->linkShiftB(hi, shift, network);
      i = network->arcs[hi].tail;      
   }
}

#define FLOW_TOLERANCE 1e-5
void checkFlows(network_type *network, bushes_type *bushes) {
   int r, i, ij, kl;
   arcListElt *curArc;
   double balance;
   
   declareVector(double, flowCheck, network->numArcs);
   for (ij = 0; ij < network->numArcs; ij++) {
      flowCheck[ij] = 0;
   }
   
   for (r = 0; r < network->numZones; r++) {
      calculateBushFlows(r, network, bushes);
      /* First check bush flow consistency */
      for (ij = 0; ij < network->numArcs; ij++) {
         flowCheck[ij] += bushes->flow[ij];
         if (bushes->flow[ij] < 0) {
            for (kl = 0; kl < network->numArcs; kl++) {            
               displayMessage(DEBUG, "(%ld,%ld) %f\n", network->arcs[kl].tail + 1, network->arcs[kl].head + 1, bushes->flow[kl]);
            }            
            fatalError("Flow validation failed: origin %d, link (%ld,%ld) has negative flow.", r, network->arcs[ij].tail + 1, network->arcs[ij].head + 1);
         }
      }
      for (i = 0; i < network->numNodes; i++) {
         if (i == r) continue;
         balance = 0;
         for (curArc = network->nodes[i].reverseStar.head; curArc != NULL; curArc = curArc->next) {
            balance += bushes->flow[ptr2arc(network, curArc->arc)];
         }
         for (curArc = network->nodes[i].forwardStar.head; curArc != NULL; curArc = curArc->next) {
            balance -= bushes->flow[ptr2arc(network, curArc->arc)];
         }         
         if (i < network->numZones) balance -= network->OD[r][i].demand;
         if (fabs(balance) > FLOW_TOLERANCE) {
            for (kl = 0; kl < network->numArcs; kl++) {            
               displayMessage(DEBUG, "(%ld,%ld) %f\n", network->arcs[kl].tail + 1, network->arcs[kl].head + 1, bushes->flow[kl]);
            }            
            fatalError("Flow validation failed: origin %d, node %ld violates conservation.", r, i + 1);
         
         }
      }
      
   }
   
   /* Then check overall link flow consistency */
   for (ij = 0; ij < network->numArcs; ij++) {
      if (fabs(flowCheck[ij] - network->arcs[ij].flow) > FLOW_TOLERANCE) {
         fatalError("Flow validation failed: link (%ld,%ld) has aggregate flow %f, but %f when disaggregated.", network->arcs[ij].tail + 1, network->arcs[ij].head + 1, network->arcs[ij].flow, flowCheck[ij]);
      }
   }
   
   deleteVector(flowCheck);
}



void exactCostUpdate(int ij, double shift, network_type *network) {
   network->arcs[ij].flow += shift;
   network->arcs[ij].cost = network->arcs[ij].calculateCost(&network->arcs[ij]);
   network->arcs[ij].der = network->arcs[ij].calculateDer(&network->arcs[ij]);
}

void linearCostUpdate(int ij, double shift, network_type *network) {
   network->arcs[ij].flow += shift;
   network->arcs[ij].cost += shift * network->arcs[ij].der;
}

void noCostUpdate(int ij, double shift, network_type *network) {
   network->arcs[ij].flow += shift;
}

/************************
 ** MERGE LINKED LISTS **
 ************************/

merge_type *createMerge(int numApproaches) {
   declareScalar(merge_type, merge);
   merge->numApproaches = numApproaches;
   merge->approach = newVector(numApproaches, int);
   merge->approachFlow = newVector(numApproaches, double);
   merge->LPlink = NO_PATH_EXISTS;
   merge->SPlink = NO_PATH_EXISTS;
   merge->divergenceNode = NO_PATH_EXISTS;
   return merge;
}

void deleteMerge(merge_type *merge) {
   deleteVector(merge->approach);
   deleteVector(merge->approachFlow);
   deleteScalar(merge);
}

void displayMerge(int minVerbosity, merge_type *merge, network_type *network) {
   int a;
   
   if (verbosity < minVerbosity) return;
   
   displayMessage(minVerbosity, "Merge with %d approaches: \n", merge->numApproaches);
   for (a = 0; a < merge->numApproaches; a++) {
      displayMessage(minVerbosity, "(%ld,%ld) %f %s %s\n", network->arcs[merge->approach[a]].tail, network->arcs[merge->approach[a]].head, merge->approachFlow[a], merge->SPlink == a ? "SP" : "  ", merge->LPlink == a ? "LP" : "  ");
   }
   displayMessage(minVerbosity, "Divergence node: %d\n", merge->divergenceNode);
}

mergeDLL *createMergeDLL() {
	declareScalar(mergeDLL, newdll);
	newdll->head = NULL;
	newdll->tail = NULL;
	newdll->size = 0;
	return newdll;
}

mergeDLLelt *insertMergeDLL(mergeDLL *list, merge_type *merge, int i, mergeDLLelt *after) {
	declareScalar(mergeDLLelt, newNode);
	newNode->merge = merge;
	newNode->node = i;
	if (after != NULL) {
		newNode->prev = after;
		newNode->next = after->next;
		if (list->tail != after) newNode->next->prev = newNode; else list->tail = newNode;
		after->next = newNode;
	} else {
		newNode->prev = NULL;
		newNode->next = list->head;
		if (list->tail != after) newNode->next->prev = newNode; else list->tail = newNode;
		list->head = newNode;
	}
	list->size++;
	return newNode;
}

void deleteMergeDLL(mergeDLL *list) {
	while (list->head != NULL)
		deleteMergeDLLelt(list, list->tail);
	killScalar(list);
}

void deleteMergeDLLelt(mergeDLL *list, mergeDLLelt *elt) {
	if (list->tail != elt) {
		if (list->head != elt) elt->prev->next = elt->next; else list->head = elt->next;
		elt->next->prev = elt->prev;
	} else {
		list->tail = elt->prev;
		if (list->head != elt) elt->prev->next = elt->next; else list->head = elt->next;
	}
	list->size--;
	killScalar(elt);
}

void displayMergeDLL(int minVerbosity, mergeDLL *list) {
	mergeDLLelt *curnode = list->head;
	displayMessage(minVerbosity, "Start of the list: %p\n", (void *)list->head);
	while (curnode != NULL) {
		displayMessage(minVerbosity, "%p %d %p %p\n", (void *)curnode, curnode->node, (void *)curnode->prev, (void *)curnode->next);
		curnode = (*curnode).next;
	}
	displayMessage(minVerbosity, "End of the list: %p\n", (void *)list->tail);
}
